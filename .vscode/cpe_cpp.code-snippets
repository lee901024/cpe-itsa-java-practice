{
	// Place your leetcode 工作區 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Main template": {
		"prefix": "main",
		"body": [
		  "#include <iostream>",
		  "#include <sstream>",
		  "//#include <bits/stdc++.h>",
		  "",
		  "using namespace std;",
		  "",
		  "int main(){",
		  "    clock_t start = clock();",
		  "    ostringstream oss;",
		  "$1",
		  "    cout << oss.str();",
		  "    clock_t end = clock();",
		  "    double duration = (double)(end - start) / (__clock_t)1000;",
		  "    cout << endl << \"Exicution Time: \" << duration << \" ms\" << endl;",
		  "    return 0;",
		  "}"
		],
		"description": ""
	},
	"Print vectors": {
		"prefix": "overload vector",
		"body": [
			"/*overload ostream << to print a vector of vectors*/",
			"template <typename T> struct is_container {",
			"\tstatic constexpr bool value = false;",
			"};",
			"template <typename T, typename Allocator>",
			"struct is_container<vector<T, Allocator>> {",
			"\tstatic constexpr bool value = true;",
			"};",
			"template <typename T>",
			"typename std::enable_if<is_container<T>::value, std::ostream &>::type",
			"inline operator<<(std::ostream &os, const T &container) {",
			"\tconst auto N = container.size();",
			"\tsize_t current = 0;",
			"\tos << \"[\";",
			"\t\tfor (const auto &item : container) {",
			"\t\tconst char *separator = current++ == N - 1 ? \"\" : \", \";",
			"\t\tos << item << separator;",
			"\t}",
			"\tos << \"]\";",
			"\treturn os;",
			"} "
		],
		"description": "Standard include"
	},
	"Print hashmap": {
		"prefix": "overload hashmap",
		"body": [
		  "// Overload the << operator to print unordered_map<int, int>",
		  "ostream& operator<<(ostream& os, const unordered_map<int, int>& hashmap) {",
		  "\tos << \"{\";",
		  "\tfor_each(hashmap.begin(), hashmap.end(), [&os](const pair<int, int>& p) {",
		  "\t    os << \"[\" << p.first << \", \" << p.second << \"], \";",
		  "\t});",
		  "\tos << \"\\b\\b}\";",
		  "\treturn os;",
		  "}",
		  "// Overload the << operator to print unordered_map<int, int>",
		  "// ostream& operator<<(ostream& os, const unordered_map<int, int>& hashmap) {",
		  "//     os << \"{\";",
		  "//     for (const auto& [key, value] : hashmap) {",
		  "//         os << \"[\" << key << \", \" << value << \"], \";",
		  "//     }",
		  "//     os << \"\\b\\b}\";",
		  "//     return os;",
		  "// }"
		],
		"description": ""
	},
	"Print LinkedList": {
		"prefix": "overload linkedlist",
		"body": [
		  "std::ostream &operator<<(std::ostream &os, ListNode *head) {",
		  "\tif (head == nullptr) {",
		  "\t\tos << \"[]\";",
		  "\t} else {",
		  "\t\tos << \"[\";",
		  "\t\twhile (head != nullptr) {",
		  "\t\t\tos << head->val << \" \";",
		  "\t\t\thead = head->next;",
		  "\t\t}",
		  "\t\tos << \"\\b]\";",
		  "\t}",
		  "\treturn os;",
		  "}"
		],
		"description": ""
	},
}