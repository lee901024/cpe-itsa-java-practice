import java.util.Scanner;

public class Main {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
	}
}

import java.util.regex.Matcher;
import java.util.regex.Pattern;
Pattern regex = Pattern.compile("[+-]{0,1}([1-9]\\d*\\.\\d*[tT]|[0]\\.\\d*[tT]|\\d+[tT])");
Matcher m = regex.matcher(s);
if(m.find()) {str = m.group(0);}

Vector<類別> 變數名稱 = new Vector<類別>();

/*Sring to Int*/
int num = Integer.parseInt(str);

/*String split with Regex*/
String[] ss = str.split("\\s+"); //以空格分割

/*Character to Uppercase*/
import java.lang.Character;
tmp = Character.toUpperCase(tmp);

/*自訂例外類別繼承Exception*/
class FormatException extends Exception{
	public FormatException() {
		
	}
}

/*比較排序*/
import java.util.Collections;
import java.util.Comparator;
/*方法一 繼承Comparable<類別名>*/
class Appointment implements Comparable<Appointment>{
	public int time;
	@Override
	public int compareTo(Appointment o) {
		// TODO Auto-generated method stub
		if(this.time<o.time) {
			return -1; //在前面
		}else if(this.time>o.time) {
			return 1;	//在後面
		}else {
			return 0;	//不交換
		}
	}
}
Collections.sort(List<> list);
/*方法二 在sort inline Comparator<類別名>*/
Collections.sort(List<> list, new Comparator<Appointment>(){
	@Override
	public int compare(Appointment a, Appointment b){
		return a.time - b.time; //由小排到大
	}
});

/*lcm=least common multiple, gcd = greatest common divisor*/
lcm(a,b) = a*b / gcd(a,b)

public static int gcd(int a, int b) {
	if(a%b==0){
		return b;
	}else {
		return gcd(b,a%b);
	}
}
public static int lcm(int a, int b) {
	return a*b/gcd(a,b);
}

/*IsDigit*/
public static boolean IsDigit(char c) {
	switch(c) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
		return true;
	default:
		return false;
	}
}

/*IsLettter*/
public static int IsLetter(char c) {
		switch(c) {
			case 'a':
				return 0;
			case 'b':
				return 1;
			case 'c':
				return 2;
			case 'd':
				return 3;
			case 'e':
				return 4;
			case 'f':
				return 5;
			case 'g':
				return 6;
			case 'h':
				return 7;
			case 'i':
				return 8;
			case 'j':
				return 9;
			case 'k':
				return 10;
			case 'l':
				return 11;
			case 'm':
				return 12;
			case 'n':
				return 13;
			case 'o':
				return 14;
			case 'p':
				return 15;
			case 'q':
				return 16;
			case 'r':
				return 17;
			case 's':
				return 18;
			case 't':
				return 19;
			case 'u':
				return 20;
			case 'v':
				return 21;
			case 'w':
				return 22;
			case 'x':
				return 23;
			case 'y':
				return 24;
			case 'z':
				return 25;
			default:
				return -1;
		}
	}
